functions_comparison_7
"When Integer is 15"
functions_comparison_15
library(ggplot2)
autoplot(functions_comparison_15)
autoplot(functions_comparison_7)
autoplot(functions_comparison_2)
## Read in the data
library(readr)
library(magrittr)
library(dplyr)
library(tidyr)
source("oop_code.R")
data <- read_csv("data/MIE.csv")
## Load any other packages that you may need to execute your code
make_LD<-function(x){
object<-list(data = as.data.frame(x))
class (object) <- "LongitudinalData"
object
}
x <- make_LD(data)
print(class(x))
## Subject 10 doesn't exist
subject<-function(x,y){
object<-list(subjects =unique(x$data[,1]),ID = y, data=x$data)
class(object)<-"subject"
object
}
print <- function(x) UseMethod("print")
summary <- function(x) UseMethod("summary")
print.subject<-function(x) {
if(x$ID %in% x$subjects){
paste("Subject ID: ", x$ID)} else {return ("NULL")}
}
print.room<-function(x){
cat(paste0("ID: ", x$ID,"\n" ," Visit: ", x$visit,"\n" ,"Room: ", x$Room ,"\n"))
}
print.summary<-function(x) {
print(x$data)
}
summary.subject<-function(x){
obj<-(x$data %>%
filter(id == x$ID)%>%
group_by(visit,room)%>%
summarize(max=mean(value))%>%
select(visit,room,max)%>%
spread(room,max))
object<-list(data=obj)
class(object)<-"summary"
object
}
summary.room<-function(x){
obj<-(x$data %>%
filter(visit==x$visit,id==x$ID,room==x$Room) %>%
select(value))
summary(obj)
}
visit<-function(x, y){
obj<-list(ID=x$ID,visit=y,subjects=x$subjects,data=x$data)
class(obj)<-"visit"
obj
}
room<-function(x, y){
obj<-list(ID=x$ID,visit=x$visit,subjects=x$subjects,data=x$data, Room=y )
class(obj)<-"room"
obj
}
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
# Factorial Loop #
factorial_loop<-function(x) {
m<-x
x<-as.integer(x)
if (abs(as.numeric(m)-as.integer(m))>0)
{message("You have not entered an integer. It will be converted into an integer so the decimal part is removed")}
s<-1
if (x==0){
return(1)}else if(x<0){return("You have entered an integer less than 0")}
for (i in  1:x){
if(i!=x){
s=s*(x-i)
}
}
s=s*x
return(s)
}
factorial_reduce<-function(x) {
m<-x
x<-as.integer(x)
if (abs(as.numeric(m)-as.integer(m))>0)
{message("You have not entered an integer. It will be converted into an integer so the decimal part is removed")}
if (x==0){
return(1)
}else if(x<0){return("You have entered an integer less than 0")}
require(purrr)
seq.int(from =1, to=x, by=1) %>% reduce(`*`)
}
factorial_func<-function(x) {
m<-x
t<-x
x<-as.integer(x)
if (abs(as.numeric(m)-as.integer(m))>0)
{message("You have not entered an integer. It will be converted into an integer so the decimal part is removed")
}
if (x==0){
return(1)}else if(x<0){return("You have entered an integer less than 0")}
if(x>1){
x * factorial_func(x-1)
}
}
mem<-rep(1,15)
factorial_mem<-function(x) {
m<-x
t<-x
x<-as.integer(x)
if (abs(as.numeric(m)-as.integer(m))>0)
{message("You have not entered an integer. It will be converted into an integer so the decimal part is removed")
}
if (x==0){
return(1)
}else if(x<0){return("You have entered an integer less than 0")}
if (mem[x]!=1){
return (mem[x])
}else{
if(x>1){
mem[x-1]<<-factorial_mem(x-1)
x * mem[x-1]
}else{
return (1)
}
}
}
library(microbenchmark)
functions_comparison_2<-microbenchmark(factorial_loop(2), factorial_reduce(2), factorial_func(2), factorial_mem(2))
"When Integer is 2"
functions_comparison_2
functions_comparison_7<-microbenchmark(factorial_loop(7), factorial_reduce(7), factorial_func(7), factorial_mem(7))
"When Integer is 7"
functions_comparison_7
functions_comparison_15<-microbenchmark(factorial_loop(15), factorial_reduce(15), factorial_func(15), factorial_mem(15))
"When Integer is 15"
functions_comparison_15
functions_comparison_7
"When Integer is 2"
functions_comparison_2
"When Integer is 7"
functions_comparison_7
"When Integer is 15"
functions_comparison_15
library(ggplot2)
autoplot(functions_comparison_15)
autoplot(functions_comparison_7)
autoplot(functions_comparison_2)
library(purrr)
Factorial_reduce<-function(n){
stopifnot(n>=0)
if (n==0)return(1)
answer<-reduce(1:n,function(x,y){
as.numeric(x*y) #Wrapping x*y inside
##a call to as.numeric prevents the answer
##from being NA, for n values that result
##in large n! values (for e.g. n=40)
})
return (answer)
}
Factorial_reduce(5)
1:2%>%reduce('*')
1:2%>%reduce(*)
1:2 %>% reduce('*')
factorial_reduce<-function(x) {
m<-x
x<-as.integer(x)
if (abs(as.numeric(m)-as.integer(m))>0)
{message("You have not entered an integer. It will be converted into an integer so the decimal part is removed")}
if (x==0){
return(1)
}else if(x<0){return("You have entered an integer less than 0")}
require(purrr)
seq.int(from =1, to=x, by=1) %>% reduce(`*`)
}
factorial_reduce(5)
factorial_mem<-function(x) {
m<-x
t<-x
x<-as.integer(x)
if (abs(as.numeric(m)-as.integer(m))>0)
{message("You have not entered an integer. It will be converted into an integer so the decimal part is removed")
}
if (x==0){
return(1)
}else if(x<0){return("You have entered an integer less than 0")}
if (mem[x]!=1){
return (mem[x])
}else{
if(x>1){
mem[x-1]<<-factorial_mem(x-1)
x * mem[x-1]
}else{
return (1)
}
}
}
factorial_mem(1)
factorial_mem(11)
mem<-rep(1,15)
factorial_mem(11)
factorial_mem(11)
functions_comparison_loop<-microbenchmark(factorial_loop(2), factorial_loop(7), factorial_loop(15))
"When Integer is 2"
functions_comparison_loop
functions_comparison_reduce<-microbenchmark(factorial_reduce(2), factorial_reduce(7), factorial_reduce(15))
"When Integer is 7"
functions_comparison_reduce
functions_comparison_func<-microbenchmark(factorial_func(2), factorial_func(7), factorial_func(15))
"When Integer is 15"
functions_comparison_mec<-microbenchmark(factorial_mem(2), factorial_mem(7), factorial_mem(15))
functions_comparison_loop
functions_comparison_reduce
functions_comparison_func
functions_comparison_mec
make_LD <- function(x) {
structure(list(data = x), class = "LongitudinalData")
}
make_LD(out)
a<-make_LD(out)
a
## Read in the data
library(readr)
library(magrittr)
library(dplyr)
library(tidyr)
source("oop_code.R")
data <- read_csv("data/MIE.csv")
## Load any other packages that you may need to execute your code
make_LD<-function(x){
object<-list(data = as.data.frame(x))
class (object) <- "LongitudinalData"
object
}
x <- make_LD(data)
print(class(x))
## Subject 10 doesn't exist
subject<-function(x,y){
object<-list(subjects =unique(x$data[,1]),ID = y, data=x$data)
class(object)<-"subject"
object
}
print <- function(x) UseMethod("print")
summary <- function(x) UseMethod("summary")
print.subject<-function(x) {
if(x$ID %in% x$subjects){
paste("Subject ID: ", x$ID)} else {return ("NULL")}
}
print.room<-function(x){
cat(paste0("ID: ", x$ID,"\n" ," Visit: ", x$visit,"\n" ,"Room: ", x$Room ,"\n"))
}
print.summary<-function(x) {
print(x$data)
}
summary.subject<-function(x){
obj<-(x$data %>%
filter(id == x$ID)%>%
group_by(visit,room)%>%
summarize(max=mean(value))%>%
select(visit,room,max)%>%
spread(room,max))
object<-list(data=obj)
class(object)<-"summary"
object
}
summary.room<-function(x){
obj<-(x$data %>%
filter(visit==x$visit,id==x$ID,room==x$Room) %>%
select(value))
summary(obj)
}
visit<-function(x, y){
obj<-list(ID=x$ID,visit=y,subjects=x$subjects,data=x$data)
class(obj)<-"visit"
obj
}
room<-function(x, y){
obj<-list(ID=x$ID,visit=x$visit,subjects=x$subjects,data=x$data, Room=y )
class(obj)<-"room"
obj
}
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
rm(list=ls())
## Read in the data
library(readr)
library(magrittr)
library(dplyr)
library(tidyr)
source("oop_code.R")
data <- read_csv("data/MIE.csv")
## Load any other packages that you may need to execute your code
make_LD<-function(x){
object<-list(data = as.data.frame(x))
class (object) <- "LongitudinalData"
object
}
x <- make_LD(data)
print(class(x))
## Subject 10 doesn't exist
subject<-function(x,y){
object<-list(subjects =unique(x$data[,1]),ID = y, data=x$data)
class(object)<-"subject"
object
}
print <- function(x) UseMethod("print")
summary <- function(x) UseMethod("summary")
print.subject<-function(x) {
if(x$ID %in% x$subjects){
paste("Subject ID: ", x$ID)} else {return ("NULL")}
}
print.room<-function(x){
cat(paste0("ID: ", x$ID,"\n" ," Visit: ", x$visit,"\n" ,"Room: ", x$Room ,"\n"))
}
print.summary<-function(x) {
print(x$data)
}
summary.subject<-function(x){
obj<-(x$data %>%
filter(id == x$ID)%>%
group_by(visit,room)%>%
summarize(max=mean(value))%>%
select(visit,room,max)%>%
spread(room,max))
object<-list(data=obj)
class(object)<-"summary"
object
}
summary.room<-function(x){
obj<-(x$data %>%
filter(visit==x$visit,id==x$ID,room==x$Room) %>%
select(value))
summary(obj)
}
visit<-function(x, y){
obj<-list(ID=x$ID,visit=y,subjects=x$subjects,data=x$data)
class(obj)<-"visit"
obj
}
room<-function(x, y){
obj<-list(ID=x$ID,visit=x$visit,subjects=x$subjects,data=x$data, Room=y )
class(obj)<-"room"
obj
}
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
library(devtools)
install.packages("devtools")
library(devtools)
rm(list=ls())
library(devtools)
devtools::build()
setwd("~/R/Doctrine")
R CMD Doctrine
devtools::check()
library()
devtools::test()
devtools::load_all()
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
has_devel()
R CMD check
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
install.packages("devtools")
install.packages("optimx")
library("testthat", lib.loc="~/R/win-library/3.4")
library("roxygen2", lib.loc="~/R/win-library/3.4")
library("devtools", lib.loc="~/R/win-library/3.4")
browseVignettes("Doctrine")
browseVignettes("devtools")
library(Doctrine)
rm(list=ls())
load("~/R/Doctrine/data/accident_2013.rda")
View(accident_2013)
library(devtools)
load_all()
document()
library(Doctrine)
document()
roxygen2::roxygenize()
roxygen2::roxygenise()
#'A data frame containing car accidents for US in 2013
#'
#'@source US National Highway Traffic Safety Administration's
#'
#'@examples
#'
#'\dontrun{accident_2013}
"accident_2013"
#'A data frame containing car accidents for US in 2014
#'
#'@source US National Highway Traffic Safety Administration's
#'
#'@examples
#'
#'\dontrun{accident_2014}
"accident_2014"
#'A data frame containing car accidents for US in 2015
#'
#'@source US National Highway Traffic Safety Administration's
#'
#'@examples
#'
#'\dontrun{accident_2015}
"accident_2015"
document()
library(Doctrine)
devtools::check()
library("devtools", lib.loc="~/R/win-library/3.4")
detach("package:devtools", unload=TRUE)
install.packages(c("httr", "knitr", "rlang", "tidyr"))
get("b")
devtools::document()
warnings()
install.packages("tidyr")
library(Doctrine)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
search()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
library(Doctrine)
devtools::check()
tools::compactPDF()
tools::compactPDF()
Sys.getenv("R_QPDF", "qpdf")
R CMD build --help
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
tools::compactPDF("bio3d/vignettes", gs_quality="ebook")
R CMD check --help
devtools::build()
devtools::submit_cran()
path.expAND()
path.expand()
PATH
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.setenv(R_GSCMD = "C:\\Program Files\\qpdf-5.1.2\\bin\\qpdf.exe")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
devtools::check()
Sys.setenv(qpdf = "C:\\Program Files\\qpdf-5.1.2\\bin\\qpdf.exe")
devtools::check()
devtools::use_git()
setwd("~/R/Doctrine")
git2r::add(man)manova()
git2r::add(man)
setwd("~/R/Doctrine")
setwd("C:/Users/Karel Couceiro")
devtools::check()
library(Doctrine)
devtools::check()
devtools::submit_cran()
